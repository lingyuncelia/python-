from PIL import Image
from pathlib import Path
import os
from shutil import copyfile

def resize(inImage, width, height, inplace=False):
    '''
    将图片调整为指定尺寸
    ----------------------------
    参数 inImage：需要处理的图片地址
    参数   width：预期图片宽度
    参数  height：预期图片高度
    参数 inplace：是否覆盖原文件
    ----------------------------
    返回 outImage：压缩后的图片地址
    '''
    if not inplace: # 如果不覆盖
        outImage = '%s-out.%s'%(inImage.split('.')[0],inImage.split('.')[1])
    else:
        outImage = inImage
    image = Image.open(inImage)
    image = image.resize((width, height))
    image.save(outImage)
    print('"%s"调整成功！(尺寸：%dx%d)'%(inImage, width, height))
    return outImage

def get_size(fileName):
    '''
    获取图片文件的大小（KB）
    --------------------
    参数 fileName: 文件名
    --------------------
    返回 fileSize：文件的大小
    '''
    fileSize = os.path.getsize(fileName)
    fileSize /= 1024 # 将单位转为KB
    return fileSize

def compress(inImage, targetSize, step=5, quality=75, inplace=False):
    '''
    将图片压缩到指定的大小
    -------------------------------
    参数    inImage：需要处理的图片地址
    参数 targetSize：预期压缩的大小
    参数       step：每次迭代的压缩比
    参数    quality：初始压缩比
    参数    inplace：是否覆盖原文件
    -------------------------------
    返回 outImage：压缩后的图片地址
    '''
    if not inplace: # 如果不覆盖
        outImage = '%s-out.%s'%(inImage.split('.')[0], inImage.split('.')[1])
    else:
        outImage = inImage
    fileSize = get_size(inImage)
    while fileSize > targetSize:
        image = Image.open(inImage)
        image.save('k:/zhusc/ps/temp.jpg', quality=quality)
        fileSize = get_size('k:/zhusc/ps/temp.jpg')
        quality -= step # 调整压缩比
        if quality < 0:
            print('"%s"压缩失败！(请调整step)'%inImage)
            return 
    if os.path.exists('k:/zhusc/ps/temp.jpg'):
        copyfile('k:/zhusc/ps/temp.jpg',outImage)
        os.remove('k:/zhusc/ps/temp.jpg') # 移处临时文件
    print('"%s"压缩成功！(大小：%.2fKB)'%(inImage, fileSize))
    return outImage
compress('k:/zhusc/ps/h.jpg',17.049,step=5, quality=75, inplace=False)

def adjust(inImage, width, height, targetSize, inplace=False):
    '''
    将图片调整为指定格式（包括尺寸及大小）
    -------------------------------
    参数    inImage：需要处理的图片地址
    参数      width：预期图片宽度
    参数     height：预期图片高度
    参数 targetSize：预期压缩的大小
    参数    inplace：是否覆盖原文件
    -------------------------------
    返回 outImage：调整后的图片地址
    '''
    if not inplace: # 如果不覆盖
        outImage = '%s-out.%s'%(inImage.split('.')[0],inImage.split('.')[1])
    else:
        outImage = inImage
    resize(inImage, width, height, inplace=inplace)
    compress(outImage, targetSize, inplace=True)
    return outImage
